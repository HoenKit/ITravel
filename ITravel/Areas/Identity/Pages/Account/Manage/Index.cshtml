@page
@model IndexModel
@{
    ViewData["Title"] = "Hồ sơ người dùng";
    ViewData["ActivePage"] = ManageNavPages.Index;
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<style>
    /* Ensuring that the form and its contents are fully responsive */
    #profile-form {
        width: 100%;
        max-width: 100%;
    }

    /* Default layout for larger screens */
    .profile-container {
        display: flex;
        flex-wrap: wrap;
    }

    /* Media query for screens smaller than 768px (tablets and smaller devices) */
    @@media (max-width: 768px) {
        .profile-container {
            flex-direction: column;
            padding: 10px;
        }
    }

    /* Ensure that input fields take full width on small screens */
    input, select, .form-floating {
        width: 100%;
    }

    /* Additional margin adjustments on small screens */
    @@media (max-width: 576px) {
        .mb-3 {
            margin-bottom: 15px;
        }
    }
    /* Add border around the entire form */
    #profile-form {
        width: 100%;
        max-width: 100%;
        border: 1px solid #ccc; /* Adds a light gray border */
        padding: 20px; /* Adds padding inside the border */
        border-radius: 10px; /* Optional: Adds rounded corners */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Optional: Adds a subtle shadow */
    }

    /* Add border to input fields and select dropdowns */
    input, select, .form-floating {
        border: 1px solid #ccc; /* Ensures a uniform border for input fields */
        border-radius: 5px; /* Optional: Adds slightly rounded corners */
    }

        /* Add focus effect for input fields */
        input:focus, select:focus {
            border-color: #fb246a; /* Changes the border color to match the button on focus */
            outline: none;
            box-shadow: 0 0 5px rgba(251, 36, 106, 0.5); /* Optional: Adds a subtle glow on focus */
        }

    /* Modal border styling */
    .modal-content {
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .btn {
        border-radius: 10px;
    }

    h5 {
        color: #fb246a;
    }

    /* Avatar display */
    .avatar {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        cursor: pointer;
    }

    /* Popup container - can be anything you want */
    .popup {
        display: none; /* Hidden by default */
        position: fixed;
        z-index: 1050; /* Ensure it's above other elements, including the save button */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        background-color: rgba(0, 0, 0, 0.5); /* Black background with opacity */
        justify-content: center;
        align-items: center;
    }

    /* Popup content */
    .popup-content {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        text-align: center;
    }

    img[alt="CV Thumbnail"] {
        border: 2px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .popup-image {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        margin-bottom: 15px;
    }

    .popup-content-CV {
        position: relative;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        max-width: 470px;
        max-height: 690px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        overflow: hidden;
    }

    #imagePopup {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        justify-content: center;
        align-items: center;
        z-index: 1050;
        overflow: hidden;
    }

    .no-scroll {
        overflow: hidden;
    }

    #cv-download-container a {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        width: 150px;
    }

    /* Close button */
    .close-btn {
        cursor: pointer;
        color: red;
        float: right;
        font-size: 20px;
        margin-right: 10px;
    }

    /* Edit and Delete buttons */
    .button-container {
        margin-top: -20px;
        display: flex;
        justify-content: space-between;
        width: 100%;
    }

    .popup-btn {
        padding: 10px 15px;
        margin: 5px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
    }

    .edit-btn {
        background-color: #4CAF50; /* Green */
        color: white;
        width: 30%;
    }

    .delete-btn {
        background-color: #f44336; /* Red */
        color: white;
        width: 30%;
    }

    body.modal-open {
        pointer-events: none; /* Disable pointer events for the body */
    }

    #popupModal {
        pointer-events: auto; /* Enable pointer events for the popup */
    }
</style>


<h5>@ViewData["Title"]</h5>
<partial name="_StatusMessage" for="StatusMessage" />

<div class="row">
    <div class="col-md-4 col-sm-12">
        <div class="text-center mb-3">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQNL_ZnOTpXSvhf1UaK7beHey2BX42U6solRA&s" alt="Avatar" class="avatar" id="avatarImage" />

            <!-- The Popup -->
            <div class="popup" id="popupModal">
                <div class="popup-dialog">
                    <div class="popup-content">
                        <div class="popup-header">
                            <span class="close-btn" id="closeBtn">&times;</span>
                            <h3>Hồ sơ ảnh</h3>
                            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQNL_ZnOTpXSvhf1UaK7beHey2BX42U6solRA&s" alt="Avatar" style="width: 150px; height: 150px; border-radius: 50%;" />
                        </div>
                        <hr />
                        <div class="popup-footer">
                            <div class="button-container">
                                <button class="popup-btn edit-btn" id="editBtn">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="popup-btn delete-btn" id="deleteBtn">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <hr />

       
    </div>

    <div class="col-md-8 col-sm-12 mx-auto">
        <form id="profile-form" method="post" enctype="multipart/form-data">
            @* enctype="multipart/form-data" *@
            @Html.AntiForgeryToken()
            <!-- Username and Phone number row -->
            <div class="row mb-3">
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <input asp-for="Username" class="form-control" placeholder="Username" disabled />
                        <label asp-for="Username">Tài khoản</label>
                    </div>
                </div>
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <input asp-for="Input.PhoneNumber" class="form-control" placeholder="Phone number" required />
                        <label asp-for="Input.PhoneNumber">Số điện thoại</label>
                        <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <!-- First name and Last name row -->
            <div class="row mb-3">
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <input asp-for="Input.FullName" class="form-control" id="fullName" type="text" placeholder="Full name" required oninput="validateName(this)" />
                        <label asp-for="Input.FullName">Họ và Tên</label>
                        <span id="firstNameError" asp-validation-for="Input.FullName" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <hr />

            <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editAddressModalLabel">Chỉnh sửa địa chỉ</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Tỉnh/Thành phố</label>
                                <select id="province" class="form-control" required>
                                    <option value="">Chọn tỉnh/thành phố</option>
                                    <!-- Populate with provinces/cities -->
                                </select>
                                <span class="text-danger"></span>
                            </div>
                            <div class="mb-3">
                                <label class="control-label">Quận/Huyện</label>
                                <select id="district" name="Input.District" class="form-control" required>
                                    <option value="">Chọn quận/huyện</option>
                                    <!-- Populate with districts -->
                                </select>
                                <span class="text-danger"></span>
                            </div>
                            <div class="mb-3">
                                <label for="addressDetail">Tên đường và phường</label>
                                <input type="text" id="addressDetail" name="addressDetail" class="form-control" placeholder="Please enter your Address." required />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button style="background-color: #fb246a;" type="button" class="btn btn-primary" id="saveAddressButton" data-bs-dismiss="modal">Lưu thay đổi</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Address field with modal -->
            <div class="form-floating mb-3 position-relative">
                <input asp-for="Input.Address" id="Input.Address" class="form-control" required readonly />
                <label asp-for="Input.Address">Address</label>
                <span asp-validation-for="Input.Address" class="text-danger"></span>
                <a href="#" class="position-absolute" style="top: -1px; right: 7px" data-bs-toggle="modal" data-bs-target="#editAddressModal">
                    <img src="https://static.vecteezy.com/system/resources/previews/019/552/595/non_2x/sign-up-icon-signup-square-box-on-transparent-background-free-png.png" alt="Edit Address" style="width: 25px; height: 14px;">
                </a>
            </div>

            <hr />

            <button style="background-color:#fb246a" id="update-profile-button" type="submit" class="w-100 btn btn-lg btn-primary">Cập nhật</button>
        </form>
    </div>
</div>



<script>
    function showImagePopup() {
        document.getElementById("imagePopup").style.display = "flex";
        document.body.classList.add("no-scroll");
    }

    function closeImagePopup() {
        document.getElementById("imagePopup").style.display = "none";
        document.body.classList.remove("no-scroll");
    }

    window.onclick = function (event) {
        const popup = document.getElementById("imagePopup");
        if (event.target === popup) {
            popup.style.display = "none";
            document.body.classList.remove("no-scroll");
        }
    }

    //API province
    document.addEventListener("DOMContentLoaded", function () {
        fetchProvinces();

        function setModalFields() {
            const Address = document.getElementById('Input.Address').value;
            const parts = Address.split(', '); // Split the full address into parts
            if (parts.length >= 3) {
                document.getElementById('addressDetail').value = parts[0]; // Address
                document.getElementById('district').value = parts[1]; // District
                document.getElementById('province').value = parts[2]; // Province
            } else {
                // Handle case where parts are not sufficient
                document.getElementById('addressDetail').value = '';
                document.getElementById('district').value = '';
                document.getElementById('province').value = '';
            }
        }

        async function fetchProvinces() {
            try {
                const response = await fetch("https://provinces.open-api.vn/api/p/");
                const provinces = await response.json();

                const provinceSelect = document.getElementById("province");
                provinceSelect.innerHTML = '';

                const defaultOption = document.createElement("option");
                defaultOption.value = "";
                defaultOption.textContent = "Select a province/city";
                provinceSelect.appendChild(defaultOption);

                provinces.forEach(province => {
                    const option = document.createElement("option");
                    option.value = province.name;
                    option.textContent = province.name;
                    option.setAttribute("data-code", province.code);
                    provinceSelect.appendChild(option);
                });
            } catch (error) {
                console.error("Error fetching provinces:", error);
            }
        }

        async function fetchDistricts(provinceName) {
            const provinceSelect = document.getElementById("province");
            const selectedOption = provinceSelect.options[provinceSelect.selectedIndex];
            const provinceCode = selectedOption.getAttribute("data-code");

            try {
                const response = await fetch(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=2`);
                const provinceData = await response.json();

                const districtSelect = document.getElementById("district");
                districtSelect.innerHTML = '<option value="">Select a district</option>';

                if (provinceData.districts && provinceData.districts.length > 0) {
                    provinceData.districts.forEach(district => {
                        const option = document.createElement("option");
                        option.value = district.name;
                        option.textContent = district.name;
                        districtSelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error("Error fetching districts:", error);
            }
        }

        document.getElementById("province").addEventListener("change", function () {
            const provinceName = this.value;
            if (provinceName) {
                fetchDistricts(provinceName);
            }
        });


        document.getElementById("saveAddressButton").addEventListener("click", function () {
            const address = document.getElementById('addressDetail').value;
            const district = document.getElementById('district').value;
            const provinceSelect = document.getElementById('province');
            const province = provinceSelect.options[provinceSelect.selectedIndex].text;
            var modal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));


            if (address && district && province) {
                const Address = `${address}, ${district}, ${province}`;

                document.getElementById('Input.Address').value = Address;

                modal.hide();
            } else {
                alert("Please fill all fields before saving.");
            }
        });


        document.getElementById('profile-form').addEventListener('submit', function (event) {

            const Address = document.getElementById('Input.Address').value;

            if (!Address) {
                alert("Please enter the full address before saving.");
                event.preventDefault();
            }
        });
    });


    // Get elements
    document.addEventListener("DOMContentLoaded", function () {
        // Get elements
        var avatarImage = document.getElementById("avatarImage");
        var popupModal = document.getElementById("popupModal");
        var closeBtn = document.getElementById("closeBtn");
        var editBtn = document.getElementById("editBtn");
        var deleteBtn = document.getElementById("deleteBtn");

        // Show the popup and disable interactions with the rest of the page
        avatarImage.onclick = function () {
            popupModal.style.display = "flex";
            document.body.classList.add("modal-open");
        }

        // Close the popup and re-enable interactions with the rest of the page
        closeBtn.onclick = function () {
            popupModal.style.display = "none";
            document.body.classList.remove("modal-open");
        }

        // Close the popup if the user clicks outside the popup content
        window.onclick = function (event) {
            if (event.target == popupModal) {
                popupModal.style.display = "none";
                document.body.classList.remove("modal-open");
            }
        }

        // Edit button functionality (replace with actual logic)
        editBtn.onclick = function () {
            alert("Edit button clicked!");
        }

        // Delete button functionality (replace with actual logic)
        deleteBtn.onclick = function () {
            if (confirm("Are you sure you want to delete this photo?")) {
                alert("Photo deleted!");
                popupModal.style.display = "none"; // Close the popup after deletion
                document.body.classList.remove("modal-open");
            }
        }
    });
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}